# -*- coding: utf-8 -*-
"""REFmodel_logged.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PBJi3OCXzgHcvJq23hUiVuPqLfe_MM28
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Default parameters
r = 2  # growth rate
c = 1  # normal death
beta = 0.02  # infection ######## Infection rate has been change from 0.02 to 0.1
gamma = 0.1  # extra death from infection
b = 0.3  # phage death
n = 5 #5  # burst size (disease growth?)
k = 1000 # cc of susceptible
muout = 0  # sus entering population from refuge
muin = 0  # sus leaving population into refuge
alpha = 0.3  # death in refuge
m = 1000  # cc of refuge population
f = 0

# Initial conditions
N0 = (np.log(10), np.log(10), np.log(10), np.log(1))


# Time points to use
tc = np.linspace(0, 500, 5001)

# Initial conditions
#N0=(10000, 0, 100, 0)

# Model
def model(t,N,r,c,beta,gamma,b,n,k,muin, muout, alpha, m,f):
    S=N[0]
    I=N[1]
    P=N[2]
    R=N[3]
    dS = r*(1-np.exp(S)/k)*(np.exp(S) + f * np.exp(I))-c-beta*np.exp(P)-muin+muout*np.exp(R-S)
    dI = beta*np.exp(S+P-I)- c- gamma
    dP = gamma*n*np.exp(I-P) - b
    dR = r*(1-np.exp(R)/m)+muin*np.exp(S-R)-alpha-muout

         # Checking for NaN or inf
    if np.isnan(dS).any() or np.isnan(dI).any() or np.isnan(dP).any() or np.isnan(dR).any():
        print("NaN values!")

    if np.isinf(dS).any() or np.isinf(dI).any() or np.isinf(dP).any() or np.isinf(dR).any():
        print("Inf values!")

    return np.array([dS,dI, dP, dR])


# Time points to use
#tc = np.linspace(0, 1000, 5001)

# Solving and running the model
sol = solve_ivp(model, [tc[0],tc[-1]], N0, t_eval=tc, args=(r,c,beta,gamma,b,n,k,muin, muout, alpha, m,f),method='Radau')

# Transform the log-scale solution back to the og scale
original_scale_solution = np.exp(sol.y)

# max values for each state variable over time
max_values = np.max(original_scale_solution, axis=1)
print(max_values)

#Plot
plt.rcParams['figure.figsize'] = [10, 5]
plt.rcParams.update({'font.size': 16})


fig = plt.figure(facecolor='w')
ax1 = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)

## and plotting the time course
ax1.plot(sol.t, np.exp(sol.y[0]), "#4daf4a", label="Susceptible")
ax1.plot(sol.t, np.exp(sol.y[1]), "#377eb8", label="Infected")
ax1.plot(sol.t, np.exp(sol.y[2]), "#f781bf", label="Parasite")
ax1.plot(sol.t, np.exp(sol.y[3]), "#ff7f00", label="Refuge")
#plt.legend(loc = 'center', fontsize = 12 )
ax1.axis([0, 500,0, 1000])
plt.show()

